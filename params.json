{"name":"Iron.Router","tagline":"A router that works on the server and the browser, designed specifically for Meteor.","body":"# Iron.Router\r\n\r\nA router that works on the server and the browser, designed specifically for\r\n[Meteor](https://github.com/meteor/meteor).\r\n\r\n## Table of Contents\r\n\r\n- [About](#about)\r\n- [Install](#install)\r\n- [Quick Start](#quick-start)\r\n- [Concepts](#concepts)\r\n\r\n## About\r\nIron.Router is the most popular routing package for Meteor. Its job is to let\r\nyou organize your application by urls. This guide wil start off with some simple\r\nexamples and progress into more advanced concepts.\r\n\r\n## Install\r\nYou can install iron:router using Meteor's package management system:\r\n\r\n```bash\r\n> meteor add iron:router\r\n```\r\n\r\nTo update iron:router to the latest version you can use the meteor update\r\ncommand:\r\n\r\n```bash\r\n> meteor update iron:router\r\n```\r\n\r\n## Quick Start\r\n\r\nStart by creating a route in your JavaScript file. By default, routes are\r\ncreated for the client and will run in the browser.\r\n\r\n```javascript\r\nRouter.route('/', function () {\r\n  this.render('Home');\r\n});\r\n```\r\n\r\nWhen the user navigates to the url \"/\", the route above will render the template\r\nnamed \"Home\" onto the page.\r\n\r\n```javascript\r\nRouter.route('/items');\r\n```\r\n\r\nThis second route will automatically render a template named \"Items\" or \"items\"\r\nto the page. In simple cases like this, you don't even need to provide a route\r\nfunction.\r\n\r\nSo far, we've only created routes that will be run directly in the browser. But\r\nwe can also create server routes. \r\n\r\n```javascript\r\nRouter.route('/item', function () {\r\n  var req = this.request;\r\n  var res = this.response;\r\n  res.end('hello from the server\\n');\r\n}, {where: 'server'});\r\n```\r\n\r\nThe `where: 'server'` option tells the Router this is a server side route.\r\n\r\n## Concepts\r\n\r\n### Server only\r\nIn a typical Web app, you make an http request to a server at a particular url,\r\nlike \"/items/5\", and a router on the server decides which function to invoke for\r\nthat particular route. The function will most likely send some html back to the\r\nbrowser and close the connection.\r\n\r\n### Client only\r\nIn some more modern Web apps you'll use a \"client side\" router like pagejs or\r\nBackbone router. These routers run in the browser, and let you navigate around\r\nan application without making trips to the server by taking advantage of browser\r\nHTML5 features like pushState or url hash fragments. \r\n\r\n### Client and server\r\nIron.Router runs on the client *and* the server. You can define a route that\r\nonly should run on the server, or a route that should only run on the client.\r\nMost of the time you'll create routes on the client. This makes your app really\r\nfast once it's loaded, because as you navigate around the application, you don't\r\nneed to load an entirely new html page.\r\n\r\nThe router is *aware* of all the routes on the client and the server. This means\r\nyou can click a link that takes you to a server route, or it might take you to a\r\nclient route. It also means that on the server, if there is no client route\r\ndefined, we can send a 404 response to the client instead of loading up the\r\nMeteor application.\r\n\r\n## Route Parameters\r\n\r\nRoutes can have variable parameters. For example, you can create one route to\r\nshow any post with an id. The `id` is variable depending on the post you want to\r\nsee such as \"/posts/1\" or \"/posts/2\". To declare a named parameter in your route\r\nuse the `:` syntax in the url followed by the parameter name. When a user goes\r\nto that url, the actual value of the parameter will be stored as a property on\r\n`this.params` in your route function.\r\n\r\nIn this example we have a route parameter named `_id`. If we navigate to the\r\n`/post/5` url in our browser, inside of the route function we can get the actual\r\nvalue of the `_id` from `this.params._id`. In this case `this.params._id => 5`.\r\n\r\n```javascript\r\n// given a url like \"/post/5\"\r\nRouter.route('/post/:_id', function () {\r\n  var params = this.params; // { _id: \"5\" }\r\n  var id = params._id; // \"5\"\r\n});\r\n```\r\n\r\nYou can have multiple route parameters. In this example, we have an `_id`\r\nparameter and a `commentId` parameter. If you navigate to the url\r\n`/post/5/comments/100` then inside your route function `this.params._id => 5`\r\nand `this.params.commentId => 100`.\r\n\r\n```javascript\r\n// given a url like \"/post/5/comments/100\"\r\nRouter.route('/post/:_id/comments/:commentId', function () {\r\n  var id = this.params.id; // \"5\"\r\n  var commentId = this.params.commentId; // \"100\"\r\n});\r\n```\r\n\r\nIf there is a query string or hash fragment in the url, you can access those\r\nusing the `query` and `hash` properties of the `this.params` object.\r\n\r\n```javascript\r\n// given the url: \"/post/5?q=s#hashFrag\"\r\nRouter.route('/post/:_id', function () {\r\n  var id = this.params._id;\r\n  var query = this.params.query;\r\n  \r\n  // query.q -> \"s\"\r\n  var hash = this.params.hash; // \"hashFrag\"\r\n});\r\n```\r\n\r\n## Rendering Templates\r\nUsually we want to render a template when the user goes to a particular url. For\r\nexample, we might want to render the template named `Post` when the user\r\nnavigates to the url `/posts/1`.\r\n\r\n```html\r\n<template name=\"Post\">\r\n  <h1>Post: {{title}}</h1>\r\n</template>\r\n```\r\n\r\n```javascript\r\nRouter.route('/post/:_id', function () {\r\n  this.render('Post');\r\n});\r\n```\r\n\r\nWe can render a template by calling the `render` method inside of our route\r\nfunction. The `render` method takes the name of a template as its first\r\nparameter.\r\n\r\n## Rendering Templates with Data\r\nIn the above example the `title` value is not defined. We could create a helper\r\non the Post template called `title` or we can set a data context for the\r\ntemplate directly from our route function. To do that, we provide a `data`\r\noption as a second parameter to the `render` call.\r\n\r\n```javascript\r\nRouter.route('/post/:_id', function () {\r\n  this.render('Post', {\r\n    data: function () {\r\n      return Posts.findOne({_id: this.params._id});\r\n    }\r\n  });\r\n});\r\n```\r\n\r\n## Layouts\r\nLayouts allow you to reuse a common look and feel in multiple pages in your\r\napplication so you don't have to duplicate the html and logic on every single\r\npage template.\r\n\r\nLayouts are just templates. But, inside of a layout you can use a special helper\r\ncalled `yield`. You can think of `yield` as a placeholder for content. The\r\nplaceholder is called a *region.* The content will be \"injected\" into the\r\nregion when we actually run our route.  This lets us reuse the layout on many\r\ndifferent pages, only changing the content of the *yield regions*.\r\n\r\n```html\r\n<template name=\"ApplicationLayout\">\r\n  <header>\r\n    <h1>{{title}}</h1>\r\n  </header>\r\n\r\n  <aside>\r\n    {{> yield \"aside\"}}\r\n  </aside>\r\n\r\n  <article>\r\n    {{> yield}}\r\n  </article>\r\n\r\n  <footer>\r\n    {{> yield \"footer\"}}\r\n  </footer>\r\n</template>\r\n```\r\n\r\nWe can tell our route function which layout template to use by calling the\r\n`layout` method.\r\n\r\n```javascript\r\nRouter.route('/post/:_id', function () {\r\n  this.layout('ApplicationLayout');\r\n});\r\n```\r\n\r\nIf you want to use a default layout template for all routes you can configure a\r\nglobal Router option.\r\n\r\n```javascript\r\nRouter.configure({\r\n  layoutTemplate: 'ApplicationLayout'\r\n});\r\n```\r\n\r\n### Rendering Templates into Regions with JavaScript\r\nInside of our route function we can tell the router which templates to render\r\ninto each region. \r\n\r\n```html\r\n<template name=\"Post\">\r\n  <p>\r\n    {{post_content}}\r\n  </p>\r\n</template>\r\n\r\n<template name=\"PostFooter\">\r\n  Some post specific footer content.\r\n</template>\r\n\r\n<template name=\"PostAside\">\r\n  Some post specific aside content.\r\n</template>\r\n```\r\nLet's say we're using the `ApplicationLayout` and we want to put the templates\r\ndefined above into their respective regions for the `/post/:_id` route. We can\r\ndo this directly in our route function using the `to` option of the `render`\r\nmethod.\r\n\r\n```javascript\r\nRouter.route('/post/:_id', function () {\r\n  // use the template named ApplicationLayout for our layout\r\n  this.layout('ApplicationLayout');\r\n\r\n  // render the Post template into the \"main\" region\r\n  // {{> yield}}\r\n  this.render('Post');\r\n\r\n  // render the PostAside template into the yield region named \"aside\" \r\n  // {{> yield \"aside\"}}\r\n  this.render('PostAside', {to: 'aside'});\r\n\r\n  // render the PostFooter template into the yield region named \"footer\" \r\n  // {{> yield \"footer\"}}\r\n  this.render('PostFooter', {to: 'footer'});\r\n});\r\n```\r\n\r\n### Setting Region Data Contexts\r\nYou can set the data contexts for regions by providing a `data` option to the\r\n`render` method. You can also set a data context for the entire layout.\r\n\r\n```javascript\r\nRouter.route('/post/:_id', function () {\r\n  this.layout('ApplicationLayout', {\r\n    data: function () { return Posts.findOne({_id: this.params._id}) }\r\n  });\r\n\r\n  this.render('Post' {\r\n    // we don't really need this since we set the data context for the\r\n    // the entire layout above. But this demonstrates how you can set\r\n    // a new data context for each specific region.\r\n    data: function () { return Posts.findOne({_id: this.params._id})\r\n  });\r\n\r\n  this.render('PostAside', {\r\n    to: 'aside',\r\n    data: function () { return Posts.findOne({_id: this.params._id})\r\n  });\r\n\r\n  this.render('PostFooter', {\r\n    to: 'footer',\r\n    data: function () { return Posts.findOne({_id: this.params._id})\r\n  });\r\n});\r\n```\r\n\r\n### Rendering Templates into Regions using contentFor\r\nRendering templates into region from our route function can be useful,\r\nespecially if we need to run some custom logic or if the template names are\r\ndynamic. But often an easier way to provide content for a region is to use the\r\n`contentFor` helper directly from our main template. Let's say we're using the\r\nsame `ApplicationLayout` from the previous example. But this time, instead of\r\ndefining a new template for each region, we'll provide the content *inline* in\r\nour `Post` template.\r\n\r\n```html\r\n<template name=\"Post\">\r\n  <p>\r\n    {{post_content}}\r\n  </p>\r\n\r\n  {{#contentFor \"aside\"}}\r\n    Some post specific aside content.\r\n  {{/contentFor}}\r\n\r\n  {{#contentFor \"footer\"}}\r\n    Some post specific footer content.\r\n  {{/contentFor}}\r\n</template>\r\n```\r\n\r\nNow we can simply specify our layout and render the `Post` template instead of\r\neach individual region.\r\n\r\n```javascript\r\nRouter.route('/post/:_id', function () {\r\n  this.layout('ApplicationLayout', {\r\n    data: function () { return Posts.findOne({_id: this.params._id}) }\r\n  });\r\n\r\n  // this time just render the template named \"Post\" into the main\r\n  // region\r\n  this.render('Post');\r\n});\r\n```\r\n\r\nYou can even provide a template option to the `contentFor` helper instead of\r\nproviding inline block content.\r\n\r\n```html\r\n<template name=\"Post\">\r\n  <p>\r\n    {{post_content}}\r\n  </p>\r\n\r\n  {{> contentFor region=\"aside\" template=\"PostAside\"}}\r\n\r\n  {{> contentFor region=\"footer\" template=\"PostFooter\"}}\r\n</template>\r\n```\r\n\r\n## Client Navigation\r\nMost of the time users of your application will navigate around the app inside\r\nthe browser instead of making new requests to the server for each page. There\r\nare a few ways to navigate around the application.\r\n\r\n### Using Links\r\nUsers can navigate around the application by clicking links. Let's say we have a\r\nlayout with some navigation links.\r\n\r\n```html\r\n<template name=\"ApplicationLayout\">\r\n  <nav>\r\n    <ul>\r\n      <li>\r\n        <a href=\"/\">Home</a>\r\n      </li>\r\n      \r\n      <li>\r\n        <a href=\"/one\">Page One</a>\r\n      </li>\r\n\r\n      <li>\r\n        <a href=\"/two\">Page Two</a>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n\r\n  <article>\r\n    {{> yield}}\r\n  </article>\r\n</template>\r\n\r\n<template name=\"Home\">\r\n  Home\r\n</template>\r\n\r\n<template name=\"PageOne\">\r\n  Page One\r\n</template>\r\n\r\n<template name=\"PageTwo\">\r\n  Page Two\r\n</template>\r\n```\r\n\r\nNext, we'll define some routes for these pages.\r\n\r\n```javascript\r\nRouter.route('/', function () {\r\n  this.render('Home');\r\n});\r\n\r\nRouter.route('/one', function () {\r\n  this.render('PageOne');\r\n});\r\n\r\nRouter.route('/two', function () {\r\n  this.render('PageTwo');\r\n});\r\n```\r\nWhen the application first loads at the root url `/` the first route will run\r\nand the template named \"Home\" will be rendered to the page.\r\n\r\nIf the user clicks the `Page One` link, the url in the browser will change to\r\n'/one' and the second route will run, rendering the 'PageOne' template.\r\n\r\nLikewise, if the user clicks the `Page Two` link, the url in the browser will\r\nchange to '/two' and the third route will run, rendering the 'PageTwo' template.\r\n\r\nEven though the url is changing in the browser, since these are client-side\r\nroutes, the browser doesn't need to make requests to the server. \r\n\r\n### Using JavaScript\r\nYou can navigate to a given url, or even a route name, from JavaScript using the\r\n`Router.go` method. Let's say we've defined a click event handler for a button.\r\n\r\n```html\r\n<template name=\"MyButton\">\r\n  <button id=\"clickme\">Go to Page One</button>\r\n</template>\r\n```\r\n\r\nIn our click event handler we can tell the router to go to the `/one` url.\r\n\r\n```javascript\r\nTemplate.MyButton.events({\r\n  'click #clickme': function () {\r\n    Router.go('/one');\r\n  }\r\n});\r\n```\r\n\r\nThis will change the browser's url to `/one` and run the corresponding route.\r\n\r\n### Using Redirects\r\nYou can redirect from one route to another from inside a route function by using\r\nthe `redirect` method inside your route function.\r\n\r\n```javascript\r\nRouter.route('/one', function () {\r\n  this.redirect('/two');\r\n});\r\n\r\nRouter.route('/two', function () {\r\n  this.render('PageTwo');\r\n});\r\n```\r\n\r\n### Using Links to Server Routes\r\nLet's say you have a server route that you'd like to link to. For example, a\r\nfile download route which *has* to go to the server.\r\n\r\n```javascript\r\nRouter.route('/download/:filename', function () {\r\n  this.response.end('some file content\\n');\r\n}, {where: 'server'});\r\n```\r\n\r\nNow, in our html we'll have a link to download a particular file.\r\n\r\n```html\r\n<a href=\"/download/myfilename\">Download File</a>\r\n```\r\n\r\nWhen a user clicks on the `Download File` link, the router will send you to the\r\nserver and run the server-side route.\r\n\r\n## Named Routes\r\nRoutes can have names that can be used to refer to the route. If you don't give\r\nit a name, the router will guess its name based on the path. But you can provide\r\na name explicitly using the `name` option.\r\n\r\n```javascript\r\nRouter.route('/posts/:_id', function () {\r\n  this.render('Post');\r\n}, {\r\n  name: 'post.show'\r\n});\r\n```\r\n\r\nNow that we've named our route, we can get access to the route object if needed\r\nlike this:\r\n\r\n```javascript\r\nRouter.routes['post.show']\r\n```\r\n\r\nBut we can also use the route name in the `Router.go` method like this:\r\n\r\n```javascript\r\nRouter.go('post.show');\r\n```\r\n\r\nNow that we're using named routes in `Router.go` you can also pass a parameters\r\nobject, query and hash fragment options.\r\n\r\n```javascript\r\nRouter.go('post.show', {_id: 1}, {query: 'q=s', frag='hashFrag'});\r\n```\r\n\r\nThe above JavaScript will navigate to this url:\r\n\r\n```html\r\n/post/1?q=s#hashFrag\r\n```\r\n\r\n## Path and Link Template Helpers\r\n\r\n### pathFor\r\nThere are a few template helpers we can use to create links based on routes.\r\nFirst, we can use the `{{pathFor}}` helper to generate a path for a given named\r\nroute. Given the `post.show` route we created above we can create a link like\r\nthis:\r\n\r\n```html\r\n{{#with post}}\r\n  <a href=\"{{pathFor 'post.show'}}\">Post Show</a>\r\n{{/with}}\r\n```\r\n\r\nAssuming we have a post with an id of \"1\", the above snippet is equivalent to:\r\n\r\n```html\r\n<a href=\"/posts/1\">Post Show</a>\r\n```\r\n\r\nWe can pass `data`, `query` and `hash` options to the pathFor helper.\r\n\r\n```html\r\n<a href=\"{{pathFor 'post.show' data=getPost query='q=s' hash='frag'}}\">Post Show</a>\r\n```\r\n\r\nThe data object will be interpolated onto the route parameters. the query and\r\nhash arguments will be added to the href as a querystring and hash fragment.\r\nLet's say our data object looks like this:\r\n\r\n```javascript\r\ndata = { _id: 1 };\r\n```\r\n\r\nThe above `pathFor` expression will result in a link that looks like this:\r\n\r\n```html\r\n<a href=\"/post/1?q=s#frag\">Post Show</a>\r\n```\r\n\r\nThe benefit of using the `pathFor` helper is that we don't need to keep hard\r\ncoded `href` attributes all over the application.\r\n\r\n\r\n### urlFor\r\nWhile the `pathFor` helper generates a path for the given route, `urlFor` will\r\ngenerate a fully qualified url. For example, `pathFor` might generate a path\r\nthat looks like `/posts/1` but `urlFor` would generate\r\n`http://mysite.com/posts/1`.\r\n\r\n### linkTo\r\nThe `linkTo` helper automatically generates the html for an anchor tag along\r\nwith the route path for the given route, parameters, hash and query. You can\r\neven provide a block of content to be used inside the link.\r\n\r\n```html\r\n{{#linkTo route=\"post.show\" data=getData query=\"q=s\" frag=\"hashFrag\" class=\"my-cls\"}}\r\n  <span style=\"color: orange;\">\r\n    Post Show\r\n  </span>\r\n{{/linkTo}}\r\n```\r\n\r\nThe expression above will be transformed into html that looks like this:\r\n\r\n```html\r\n<a href=\"/posts/1?q=s#hashFrag\" class=\"my-cls\">\r\n  <span style=\"color: orange;\">\r\n    Post Show\r\n  </span>\r\n</a>\r\n```\r\n\r\n## Server Routing\r\n\r\n### Creating Routes\r\nSo far you've seen features mostly intended for the browser. But you can also\r\ncreate server routes with full access to the NodeJS request and response\r\nobjects. To create a server route you provide the `where: 'server'` option to\r\nthe route.\r\n\r\n```javascript\r\nRouter.route('/download/:file', function () {\r\n  // NodeJS request object\r\n  var request = this.request;\r\n\r\n  // NodeJS  response object\r\n  var response = this.response;\r\n\r\n  this.response.end('file download content\\n');\r\n}, {where: 'server'});\r\n```\r\n\r\n### Restful Routes\r\nYou can even create server-side restful routes which correspond to an http verb.\r\nThis is particularly useful if you're setting up a webhook for another service\r\nto post data to.\r\n\r\n```javascript\r\nRouter.route('/webhooks/stripe', { where: 'server' })\r\n  .get(function () {\r\n    // GET /webhooks/stripe\r\n  })\r\n  .post(function () {\r\n    // POST /webhooks/stripe\r\n  })\r\n  .put(function () {\r\n    // PUT /webhooks/stripe\r\n  })\r\n```\r\n\r\n### 404s and Client vs Server Routes\r\nWhen you initially navigate to your Meteor application's url, the server router\r\nwill see if there are any routes defined for that url, either on the server or\r\non the client. If no routes are found, the server will send a 404 http status\r\ncode to indicate no resource was found for the given url.\r\n\r\n### Server Middleware and Connect\r\nYou can attach middleware to the router on the server using the `use` method of\r\nthe router. And Connect middleware just works out-of-the-box. This is because\r\nthe `req, res, next` arguments are passed to the router handler functions like\r\njust in the Connect middleware stack. But typically we'll access those\r\nproperties using `this.request`, `this.response`, and `this.next` instead.\r\n\r\n```javascript\r\nif (Meteor.isServer) {\r\n  // assuming we've loaded a package with access to connect\r\n  var connect = Npm.require('connect');\r\n  Router.use(connect.queryParser(), {where: 'server'});\r\n}\r\n```\r\n\r\nYou could also create your own server-side middleware. For example, you might\r\nwant to log all http requests.\r\n\r\n```javascript\r\nRouter.use(function logHttpRequests () {\r\n  var method = this.method;\r\n  var url = this.url;\r\n  console.log(method + ' ' + url);\r\n\r\n  // go on to the next handler now\r\n  this.next();\r\n}, {where: 'server'});\r\n```\r\n\r\n## Route Dispatching and Middleware\r\n\r\n## Legacy Browser Support\r\n\r\n## Route Controllers\r\n\r\n## Hooks\r\n\r\n## Plugins\r\n\r\n## State with get/set and UI.controller();\r\n\r\n## Custom Router Rendering","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}